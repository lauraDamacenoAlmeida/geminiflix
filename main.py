import streamlit as st
import pandas as pd
import base64
import seaborn as sns
import numpy as np
import google.generativeai as genai
from deep_translator import GoogleTranslator

model = "models/embedding-001"
GOOGLE_API_KEY= "AIzaSyCzb82DnEM0S4pQyZAJAHFXBI8wmFTxmsQ"
genai.configure(api_key=GOOGLE_API_KEY)


def embed_fn(title, text):
  return genai.embed_content(model=model,
                                 content=text,
                                 title=title,
                                 task_type="RETRIEVAL_DOCUMENT")["embedding"]


# encontrar o filme semelhante com a entrada do usu√°rio
def gerar_e_buscar_consulta(consulta, base):
  embedding_da_consulta = genai.embed_content(model=model,
                                 content=consulta,
                                 task_type="RETRIEVAL_QUERY")["embedding"]

  produtos_escalares = np.dot(np.stack(base["Embeddings"]), embedding_da_consulta)

  indice = np.argmax(produtos_escalares)
  return base.iloc[indice]["description"], base.iloc[indice]["title"]

def read_embeddings():
    df = pd.read_csv('netflix_titles.csv')
    movies200 = df.loc[:200]
    movies200["Embeddings"] = movies200.apply(lambda row: embed_fn(row["title"], row["description"]), axis=1)
    return movies200



def output_genai(trecho,titulo):
    generation_config = {
    "temperature": 0.2,
    "candidate_count": 1
    }

    #configura√ß√µes de seguran√ßa
    safety_settings = {
        "HARASSMENT": "BLOCK_LOW_AND_ABOVE",
        "HATE":"BLOCK_LOW_AND_ABOVE",
        "SEXUAL": "BLOCK_NONE",
        "DANGEROUS": "BLOCK_LOW_AND_ABOVE"
    }

    model_2 = genai.GenerativeModel("gemini-1.0-pro",
                                generation_config=generation_config,safety_settings=safety_settings)
    prompt = f"You are friend of someone and you are recommended a movie to someone based on what they said. Rewrite this text leaving it in Portuguese and in a more informal way and friendly, without adding information that is not part of the text: {trecho} movie name {titulo}"
    resposta = model_2.generate_content(prompt) 
    return resposta.candidates[0].content.parts[0].text


def translate_english(prompt):
    translated = GoogleTranslator(source='pt', target='english').translate(prompt)
    return translated

def main():
    st.title('E a√≠, pessoal! Sejam muito bem-vindos ao GeminiFlix! üòÑ')
    st.markdown("Estou aqui para trazer um pouquinho de divers√£o e facilidade para os seus momentos de indecis√£o na hora de escolher um filme ou programa para assistir. Quem nunca ficou perdido no mar de op√ß√µes da Netflix, n√©? Eu sei como √©! √â por isso que estou aqui para ajudar!")
    st.markdown("Eu sou o seu assistente de *Intelig√™ncia Artificil* perfeito para esses momentos de indecis√£o. Basta me dizer o que voc√™ est√° procurando, e eu vou correr atr√°s das melhores op√ß√µes para voc√™! *Adeus indecis√£o, ol√° entretenimento sem esfor√ßo comigo!* Estou aqui para fazer a sua experi√™ncia na Netflix muito mais f√°cil e divertida. Vamos nessa! üé¨‚ú®")
    st.image('images/teste1.jpg', caption='Geminiflix - Imagem feita pela IA do Nightcaf√©')

    st.subheader("Como posso interagir com voc√™?")
    st.markdown("Para isso basta colocar no chat ao lado as caracter√≠sticas e descri√ß√£o do filme ou programa de TV que voc√™ tem interesse em assistir.")


    st.subheader("Mas com base no que voc√™ est√° tirando as recomenda√ß√µes?")
    st.markdown("Fui treinado com uma ampla base de conhecimento que inclui mais de 200 filmes e programas de TV dispon√≠veis no cat√°logo da Netflix. Essa base foi compilada na comunidade Kaggle, uma das maiores comunidades de ci√™ncia de dados do mundo. ‚ú® No entanto, √© importante notar que minha base de dados abrange filmes lan√ßados at√© o ano de 2021. Portanto, n√£o poderei oferecer recomenda√ß√µes de conte√∫dos lan√ßados ap√≥s esse ano.")

    st.subheader("E como voc√™ faz essas recomenda√ß√µes?")
    st.markdown("Eu sou um conjunto de dois modelos de Intelig√™ncia Artificial da Google, o Gemini. E baseado nas caracter√≠sticas do que voc√™ quer assistir, vou procurar dentro do meu acervo de conhecimento o mais parecido com o seu gosto. Espero que voc√™ goste da minha indica√ß√£o")

    st.subheader("Criadora")
    st.markdown("Fui criado pela Laura Damaceno de Almeida (@laura_data_talks). Qualquer problema comigo ou pontos de melhoria, fale com ela.")

    movies = read_embeddings()
    #st.image('image.png',width= 900)


    with st.sidebar:
        messages = st.container(height=300)
        messages.chat_message("assistant").write(f"GeminiFlix: Ol√° humano üëã. Sou o Geminiflix seu assistente para momentos de indecis√£o ao escolher algo para assitir!")
        messages.chat_message("assistant").write(f"Descreva para mim o tipo de filme que voc√™ gostaria de assistir.")


        if prompt := st.chat_input("Digite algo.."):
            messages.chat_message("user").write(prompt)
            prompt_english = translate_english(prompt)
            trecho, titulo = gerar_e_buscar_consulta(prompt_english, movies)
            resposta = output_genai(trecho,titulo)

            #resposta = output_genai(model_2, trecho,titulo)
            messages.chat_message("assistant").write(f"GeminiFlix: {resposta}")
    #prompt = st.chat_input(placeholder="Your message")
    #if prompt:
    #    st.write(prompt)




if __name__ == '__main__':
    main()